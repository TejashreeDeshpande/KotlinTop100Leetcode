// HackerRank : Efficient Janitor
// Find the minimum number of groups who's sum of each group is at max 3, and every element must be in a group.
// Given an Array like: [1.01, 1.01, 3.0, 2.7, 1.99, 2.3, 1.7]
// return the minimum number of groups, in this case it would be 5 groups: (1.01 , 1.99), (1.01, 1.7), (3.0), (2.7), (2.3)
// Constraint: all elements are between 1.01-3 inclucsive, and each groups sum is at max 3

fun main(args: Array<String>) {
	// val numbers = doubleArrayOf(1.01, 1.01, 3.0, 2.7, 1.99, 2.3, 1.7)
    val numbers = doubleArrayOf(1.01, 1.99, 2.5, 1.5, 1.01)
    println("${trips(numbers)}")
}

fun trips(numbers: DoubleArray) : Int {

    val sortedNumbers = numbers.sorted()

    var left = 0
    var right = numbers.size - 1
    var trips = 0

    println(sortedNumbers.joinToString(" "))
    println(" ")
    while (right >= left) {
        if (sortedNumbers[left] + sortedNumbers[right] <= 3.0) {
            left += 1
            right -= 1
            trips += 1
        } else {
            right -= 1
            trips += 1
        }
    }
    return trips
}
