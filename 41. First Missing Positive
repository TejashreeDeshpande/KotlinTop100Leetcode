// 41. First Missing Positive
// Given an unsorted integer array nums, return the smallest missing positive integer.
// You must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.
// Example 1:
// Input: nums = [1,2,0]
// Output: 3
// Explanation: The numbers in the range [1,2] are all in the array.

// Example 2:
// Input: nums = [3,4,-1,1]
// Output: 2
// Explanation: 1 is in the array but 2 is missing.

// Example 3:
// Input: nums = [7,8,9,11,12]
// Output: 1
// Explanation: The smallest positive integer 1 is missing.
fun main(args: Array<String>) {
    val numbers = arrayOf(4, 2, 7, 3, 1, 6)
    // val numbers = arrayOf(-3, -5, 0)
    // val numbers = arrayOf(2, 3, 1, -3, 8, 2)
    println("Missing Number ${findFirstPositiveMinElement(numbers)}")
}
fun findFirstPositiveMinElement(numbers: Array<Int>) : Int {

    val size = numbers.size
    var counter = 0
    while (counter < (size - 1)) {
        val element = numbers[counter]
        val position = element - 1 

        if (element >= 1 && element <= size) {
            if (numbers[position] != element) {
                // Swap numbers[counter] and numbers[position]
                numbers[counter] = numbers[position]
                numbers[position] = element
            
                counter -= 1    
            }
        }
        ++counter
    }
    for (i in 0..size - 1) {
        if (i + 1 != numbers[i]) 
            return i + 1
    }
    return size + 1
}
