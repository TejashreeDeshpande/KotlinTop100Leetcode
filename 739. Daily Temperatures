// 739. Daily Temperatures
// Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.
// Example 1:
// Input: temperatures = [73,74,75,71,69,72,76,73]
// Output: [1,1,4,2,1,1,0,0]

// Example 2:
// Input: temperatures = [30,40,50,60]
// Output: [1,1,1,0]

// Example 3:
// Input: temperatures = [30,60,90]
// Output: [1,1,0]

import java.util.Stack
fun main(args: Array<String>) {
    // val temperatures = arrayOf(30, 40, 50, 60)
    val temperatures = arrayOf(73, 74, 75, 71, 69, 72, 76, 73)
	print("Output Array = ${dailyTemperature(temperatures).joinToString(" ")} ")
}

fun dailyTemperature(temperatures : Array<Int>) : Array<Int> {
    val length = temperatures.size
    val stack = Stack<Int>()
    var output = Array<Int>(length){ 0 }

    for (i in length - 1 downTo 0) {
        // Popping all indices with a lower or equal
        // temperature than the current index
        while (!stack.isEmpty() &&
                temperatures[i] >= temperatures[stack.peek()]) {
            stack.pop()
        }
        // if the stack still has elements
        // then the next warmer temperature exists
        if (!stack.isEmpty()) {
            output[i] = stack.peek() - i
        }
        stack.push(i)
    }
    return output
}
