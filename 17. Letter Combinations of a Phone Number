// 17. Letter Combinations of a Phone Number
// Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

// A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
//Input: digits = "23"
//Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

fun letterCombination(digits: String): List<String> {
    val result = mutableListOf<String>()
    val digitsToChar = mapOf(
        "2" to "abc",
        "3" to "def",
        "4" to "ghi",
        "5" to "jkl",
        "6" to "mno",
        "7" to "pqrs",
        "8" to "tuv",
        "9" to "wxyz"
    )
    
    fun backtrack(i: Int, curStr: String) {
        if (curStr.length == digits.length) {
            result.add(curStr)
            return
        }
        val str = digitsToChar[digits[i].toString()]
        str?.let {
            for (c in str) {
                backtrack(i+1, curStr + c)
            }
        } ?: println("digit ${digits[i].toString()} not available")
        return
    }
    backtrack(0, "")
    return result
}
