data class TreeNode(var value: Int, var left: TreeNode? = null, var right: TreeNode? = null)
fun main(args: Array<String>) {
	  var head = TreeNode(2)
    val n1 = TreeNode(7)
    val n2 = TreeNode(5)
    
    val n3 = TreeNode(2)
    val n4 = TreeNode(6)
    val n5 = TreeNode(5)
    val n6 = TreeNode(11)
	  val n7 = TreeNode(9)
    val n8 = TreeNode(4)
    
    head.left = n1
    head.right = n2
    
    n1.left = n3
    n1.right = n4
    
    n4.left = n5
    n4.right = n6
    
    n2.right = n7
    n7.left = n8

    levelOrderTraversal(head)
}

fun reverseLevelOrderTraversal(node: TreeNode?) {
    if (node == null)
    	return
    val height = height(node)
    for (i in height downTo 0) {
        printNodesAtGivenLevel(node, i+1)
        println(" ")
    }
}
fun height(node: TreeNode?): Int {
    if (node == null)
    	return -1
    return 1 + Math.max(height(node.left), height(node.right))
}
