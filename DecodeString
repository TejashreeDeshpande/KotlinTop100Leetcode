// 394. Decode String
// Given an encoded string, return its decoded string.
// The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.
// You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].
// The test cases are generated so that the length of the output will never exceed 105.
// Example 1:
// Input: s = "3[a]2[bc]"
// Output: "aaabcbc"

import java.util.*
fun main() {
    println("Hello, world!!!")
    //val s = "3[a]2[bc]"
    val s = "3[a2[c]]"
    val output = decodeString(s)
    println(output)
}
fun decodeString(s: String) : String {
    
    val stack = Stack<Char>()
    
	  for (ch in s) {
        if (ch == ']') { 
            var tempStr = ""
	        while (!stack.empty() && stack.peek() != '[') {
                tempStr = stack.peek() + tempStr
	            stack.pop()
            }
            // remove the '[' from the stack
            stack.pop()
	        var num: String = ""
            // remove the digits from the stack
	        while (!stack.empty() && stack.peek().isDigit()) {
                num = stack.peek() + num
        	    stack.pop()
            }
            val number = num.toInt()
           
	        var repeatStr: String = ""
	        for (j in 0..number-1)
            	repeatStr += tempStr
	        for (c in repeatStr)
            	stack.push(c)
        } else {
            stack.push(ch)
            
        } 
    }
    var res: String = ""
    while (!stack.empty()) {
        res = stack.peek() + res
        stack.pop()
    }
    return res
}
