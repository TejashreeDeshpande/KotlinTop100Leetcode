// 21. Merge Two Sorted Lists
// You are given the heads of two sorted linked lists list1 and list2.
// Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.
// Return the head of the merged linked list.
// list1 = [1,2,4], list2 = [1,3,4]
// Output: [1,1,2,3,4,4]

fun main(args: Array<String>) {
    var l1 = ListNode(1)
    var l2 = ListNode(2)
    var l3 = ListNode(4)
    l1.next = l2
    l2.next = l3

    var ll1 = ListNode(1)
    var ll2 = ListNode(3)
    var ll3 = ListNode(4)
    ll1.next = ll2
    ll2.next = ll3

    println("List1: ${l1.toString()}")
    println("List2: ${ll1.toString()}")
    println("Merged List: ${mergeTwoLists(l1, ll1).toString()}")

}
fun mergeTwoLists(list1: ListNode?, list2: ListNode?): ListNode? {
        val result = ListNode(0)
        var current = result

        var node1 = list1
        var node2 = list2
        while (node1 != null || node2 != null) {
            if (node1 == null) {
                current.next = node2
                break
            }
            if (node2 == null) {
                current.next = node1
                break
            }

            if (node1.value < node2.value) {
                current.next = node1
                node1 = node1.next
            } else {
                current.next = node2
                node2 = node2.next
            }
            current = current.next!!

        }
        return result.next
    }

fun mergedList(n1: Node, m1: Node): Node? {
    var n = n1
    var m = m1
    var returnNode = Node(Int.MIN_VALUE)
    var current = returnNode
    
    while (n.next != null && m.next != null) {
        if (n.d < m.d) {
			current.next = n
            n = n.next ?: break
        } else {
            current.next = m
            m = m.next ?: break
        }
        current = current.next!!
    }

    if (n.next != null) {
        current.next = n
    }
    if (m.next != null) {
        current.next = m
    }
    return returnNode.next
}

 // Definition for singly-linked list.
 data class ListNode(val value: Int) {
    var next: ListNode? = null
    
    override fun toString(): String {
	return if (next != null) {
            "$value -> ${next.toString()}"
        } else {
            "$value"
        }
    }
}
  
